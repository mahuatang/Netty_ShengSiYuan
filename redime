/*47 48 集初步看完*/

/**************************12集***********************************/
rmi：remote method invocation，只针对Java

client：stub

server：skeleton

序列化与反序列化也叫做：编码与解码

RPC：Remote Procedure Call， 远程过程调用，很多RPC框架是跨语言的。
1.定义一个接口说明文件：描述了对象（结构体）、对象成员、接口方法等一系列信息。
2.通过RPC框架所提供的编译器，将接口说明文件编译成具体语言文件。
3.在客户端与服务器端分别引入RPC编译器所生成的文件，即可像调用本地方法一样调用远程方法。

required:当不需要required时，改成其他类型可能会造成兼容性问题。
optional：推荐使用
repeated：相当于一个数组

Spring Mvc
Struts2

@GetMapping(...="/user/user/123")

@PostMapping(...="/users/user/")

DispatcherServlet

控制器
/********************************************17集************************************************/
使用git作为版本控制系统：
如何共享生成的proto文件，目前有2种解决方案
1.git submodule：git仓库里的一个仓库
ServerProject：
Protobuf-Java：
data.proto 作为一个独立的仓库
ClientProject：
branch：
    develop
    test
    master
    外层仓库和里层仓库保持一致
    develop
    test
    master

2.git subtree



/***********************************************18集**********************************************************/
Apach Thrift
Thrift最初由FaceBook研发，主要用于各个服务之间的RPC通信，支持跨语言，常用的语言比如C++，Java，Python，PHP，Ruby，Erlang，Perl，
Haskell，C#，Haskell，C#，Cocoa，JavaScript，Node.js，Smalltalk，and OCaml都支持。
Thrift是一个典型的CS（客户端/服务端）结构，客户端和服务端可以使用不同的语言开发。既然客户端和服务端能使用不同的语言开发，
那么一定就要有一种中间语言来关联客户端和服务端的语言，这种语言就是IDL（Interface Description Language）。
Thrift不支持无符号类型，因为很多编程语言不存在无符号类型，比如Java。

Thrift数据类型
byte：有符号字节
i16:16位有符号整数
i32:32位有符号整数
i64:64位有符号整数
double：64位浮点数
string：字符串

Thrift容器类型
集合中的元素可以是除了service之外的任何类型，包括exception
list：一系列由T类型的数据组成的有序列表，元素可以重复
set：一系列由T类型的数据组成的无序列表，元素不可重复
map：一个字典结构，key为K类型，value为V类型，相当于Java中的HashMap

Thrift工作原理
如何实现多语言之间的通信？
数据传输使用socket（多种语言均支持），数据再以特定的格式（String等）发送，接受方语言进行解析。
定义thrift的文件，由thrift文件（IDL）生成双方语言的接口、model，在生成的model以及接口中会有解码编码的代码。

结构体（struct）
就像C语言一样，Thrift支持struct类型，目的就是将一些数据聚合在一起，方便传输管理。struct的定义形式如下：
struct People {
    1：string name；
    2：i32 age；
    3：string gender；
}

枚举
枚举的定义形式和Java的Enum定义类似：
enum Gender {
    MALE,
    FEMALE
}
异常
Thrift支持自定义exception，规则与struct一样
exception RequestException {
    1：i32 code；
    2：string reason；
}

服务
Thrift定义服务相当于Java中创建Interface一样，创建的service经过代码生成命令之后就会生成客户端和服务端的框架代码。
定义形式如下：
service HelloWorldService {
    //service中定义的函数，相当于Java interface //中定义的方法
    string doAction（1：string name， 2： i32 age）；
}

Thrift 支持类似C++一样的typedef定义：
typedef i32 int
typedef i64 long

常量 thrift也支持常量定义，使用const关键字：
const i32 MAX_RETPIES_TIME = 10
const string MY_WEBSITE = "http://facebook.com"

命名空间
Thrift的命名空间相当于Java中的package的意思，主要目的是组织代码。thrift使用关键字namespace定义命名空间
namespace java com.test.thrift.demo
格式是：namespace 语言名 路径
文件包含
Thrift也支持文件包含，相当于C/C++中的include，Java中的import。使用关键字include定义：
include "global.thrift"
Thrift 注释方式支持shell风格的注释，支持C/C++风格的注释, 即#和//开头的语句都当做注释，/**/包裹的语句也是注释。
可选与必选
Thrift提供两个关键字required，optional，分别用于表示对应的字段是必填的还是可选的
struct People {
    1：required string name；
    2：optional i32 age；
}
生成代码
了解了如何定义thrift文件之后，我们需要用定义好的thrift文件生成我们需要的目标语言的源码
首先需要定义thrift接口描述文件
参见data.thrift



/*********************************************19集***************************************************/
Thrift架构（一般RPC框架也是这样）

Client                         Server


Your Code                     Your Code
FooService.Client             FooService.Processor
Foo.write()/read()            Foo.read()/write()
TProtocol                     TProtocol
TTransport                    TTransport


Underlying I/O                Underlying I/O

Thrift传输格式

TBinaryProtocol----二进制格式
**TcompactProtocol----压缩格式
TJSONProtocol----JSON格式
TSimpleJSONProtocol----提供JSON只写协议，生成的文件很容易通过脚本语言解析。
TDebugProtocol----使用易懂的可读的文本格式，以便于debug。

Thrift数据传输方式

TSocket-------阻塞式socket
**TFramedTransport-----------以frame为单位进行传输，非阻塞式服务中使用
TFileTransport-----以文件形式进行传输
TMemoryTransport----------将内存用于I/O,Java实现时内部实际使用了简单的ByteArrayOutputStream。
TZlibTransport--------使用zlib进行压缩，与其他传输方式联合使用。当前无Java实现。

Thrift支持的服务模型

TSimpleServer-------------简单的单线程服务模型，常用于测试
TThreadPoolServer----------多线程服务模型，使用标准的阻塞式IO。
TNonblockingServer------------多线程服务模型，使用非阻塞式IO（需使用TFramedTransport数据传输方式）
**THsHaServer-------THsHa引入了线程池去处理，其模型把读写任务放到线程池去处理；Half-sync/Half-async的处理模式，Half-aysnc
是在处理IO事件上（accept/read/write io）, Half-sync用于handler对rpc的同步处理



**主要搭配






/*****************************32集**********************************************/
装饰模式又叫做包装模式；
装饰模式以对客户端透明的方式拓展对象的功能，是继承关系的一个替代方案；（继承是对类的拓展）
装饰模式以对客户透明的方式动态的给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。
装饰模式可以在不创造更多子类的情况下，将对象的功能加以拓展。

装饰模式的角色：

抽象构件角色：InputStream
具体构件角色：FileInputStream
装饰角色：FilterInputStream
具体装饰角色：BufferedInputStream

装饰模式VS继承

装饰模式：1.用来拓展特定对象的功能；
2.不需要子类；
3.动态；
4.运行时分配职责；
5.防止由于子类而导致的复杂和混乱；
6.更多的灵活性；
7.对于一个给定的对象，同时可能有不同的装饰对象，客户端可以通过它的需要选择合适的装饰对象发送信息。
继承:
1.用来拓展一类对象的功能
2.需要子类；
3.静态；
4.编译时分配职责；
5.导致很多子类产生；
6.缺乏灵活性。

装饰模式的适用性：
1.想要透明并且动态地给对象增加新的职责（方法）而又不会影响其他对象；
2.给对象增加的职责在未来可能会发生改变；
3.用子类拓展功能不实际的情况下。

volatile的作用：1）多线程工作环境中，工作内存和其他工作内存保持一致性；
          2）防止指令重排序。

/************************************33集******************************************/
io VS  nio

java.io中最为核心的一个概念是流（stream），面向流的编程。
输入流和输出流只能有一种，Java中一个流要么是输入流要么是输出流，不可能同时是输入流和输出流。
java.nio中拥有三个核心概念：Selector,Channel与Buffer。在java.nio中，我们是面向块（block）或是缓冲区（buffer）编程的。
buffer本身就是一块内存，底层实现上实际上就是一个数组，数据的读、写都是通过buffer来实现的。
buffer.flip实现buffer的读写切换。

除了数组之外，Buffer还提供了对于数据的结构化访问方式，并且可以追踪到系统的读写过程。

Java中的7种原生数据类型都有各自对应的Buffer类型，如IntBuffer，LongBuffer，ByteBuffer，及CharBuffer等等，并没有BooleanBuffer。

Channel指的是可以向其写入数据或是从中读取数据的对象，它类似于java.io中的stream。
所有数据的读写都是通过Buffer来进行的，永远不会出现直接向Channel写入数据的情况，或是直接从Channel读取数据的情况。

与stream不同的是，Channel是双向的，一个流只可能是InputStream或是OutputStream，Channel打开后则可以进行读取、写入或是读写。
由于channel是双向的，因此它能更好地反映出底层操作系统的真实情况；在Linux系统中，底层操作系统的通道就是双向的。

/***************************************34集*************************************************/

关于NIO Buffer中的3个重要状态属性的含义：position,limit与capacity。

/****************************************35集*************************************************/
0 <= mark <= position <= limit <= capacity
clear:将buffer恢复初始化；
rewind：buffer重新读取，limit不变，position为0；
部分方法返回当前对象，方法链。b.flip().position(23).limit(42);

/*****************************************36集***********************************************/
通过NIO读取文件涉及到3个步骤：
1、从FileInputStream获取到FileChannel对象；
2、创建Buffer；
3.将数据从Channel读取到Buffer中。

绝对方法与相对方法的含义：
1.相对方法：limit值与position值会在操作时被考虑到；
2.绝对方法：完全忽略掉limit与position值。

/******************************************40集********************************************/

ServerSocket serverSocket = ...
serverSocket.bind(8899);

while(true) {
    Socket socket = serverSocket.accept();//阻塞方法

    new Thread(socket);

    run() {
        socket.getInputStream().
        ......
         ......
          ......
    }
}

Socket socket = new Socket("localhost", 8899);
socket.connect();


/*********************46集*****************************/

ASCII （American Standaed Code for Information Interchange, 美国信息交换标准代码）
7 bit 来表示一个字符，共计可以表示128种字符。
ISO-8859-1
8 bit 表示一个字符，即用一个字节（byte）（8 bit）来表示一个字符，共计可以表示256个字符。
gb2312
两个字节表示一个汉字。

gbk

gb18030

big5

unicode, 统一采用了两个字节来表示一个字符。

UTF, Unicode Translation Format

unicode是一种编码方式，而UTF则是一种存储方式；UTF-8是Unicode的实现方式之一。
UTF - 16LE(little endian), UTF - 16BE(big endian)
Zero Width No-Break Space, 0xFEFF(BE), 0xFFFE(LE)
UTF-8, 变长字节表示形式
一般来说，UTF-8会通过3个字节来表示一个中文。

BOM(Byte Order Mark),部分windos操作系统带bom导致UTF-8导致文件难以解析，其实UTF-8可以不带bom。

你好
AB CD EF AA BB CC
/***********************************49集***********************************************************/
零拷贝
以Linux系统为例
普通的io编程（inputstream 和 outputstream）涉及到4次上下文切换，2次拷贝，将每张图的原理分析完整。
/****************************51集***********************************/
真正意义上的零拷贝，是将硬件上的文件拷贝到内核空间的缓冲区中，同时将文件的位置和长度信息拷贝到socket buffer中，协议引擎
在读取数据时，会同时同内核的buffer和socket buffer中同时读取数据，这里涉及到scattering和gathering，还有一个文件指针的概念
FileDecccccc（不会写）。总共只会进行一次拷贝。
以后在网络上传递数据时，优先考虑零拷贝。
/***********************************52集**********************************************/






/*************************************56集之前*******************************************/


Java.util.concurrency这个包本身的设计是存在一定的问题的，其中isDone方法包含了许多种情况，并且get（）方法也是阻塞的，我们不知道程序何时执行
完才去获取结果。
而netty在实现ChannelFuture的时候对原有的Future类进行了重写，其中将isDone中的多种情况进行了重写，变得更加细化（具体查看博客或者源代码的分类情况）。
同时摒弃了get（）的阻塞，改成了添加listener，当方法执行完了的时候会自动通知监听器方法已执行完。涉及到了一种观察者模式。

线程工厂中的代理模式以及命令模式的设计思想。

Reactor模式（反应器模式）

Proactor模式

Neytty整体架构是Reactor模式的完整体现。

Responsive Design

Scalable IO in Java

/****************************************************/
不同的网络服务，大多时候都有相同的基本结构：
读请求
对请求进行解码
处理服务
对响应编码
发送响应

但是每一步的成本和本质都是有区别的

经典的服务设计

多个客户端向服务器发送请求，每个处理器都在各自的线程启动

/*********************************************60集*******************************************************************/

关于bossgroup和workergroup的任务流程：
    当多个客户端向服务器发送请求时，服务器端的bossgroup会使用Selector监听客户端的连接请求，连接一旦建立，会使用accept接收，
accept会返回Selectionkey的集合，每一个SelectionKey都对应着一个客户端的连接，根据SelectionKey获取SocketChannel，netty会使用
NioSocketChannel包装SocketChannel。接着将Channel注册到WorkerGroup对应的Selector中，这个Selector开始监听客户端的读事件。当
客户端再次向服务器端发送数据时，会直接跟WorkderGroup打交道，而不会涉及到BossGroup。

    （自己理解的写的）Netty在分配内存缓冲区时，提供了自己的一套预测机制。底层会有一个字节数组，按照一定规律依次递增。
Netty会根据上一次的实际读取字节数和已经分配的字节数进行对比，动态地增加或者减少。


/*****************************************61集***************************************************************************/

Reactor模式的角色构成（Reactor模式一共有5种角色构成）：

1.Handle(句柄或是描述符)：本质上表示一种资源，是由操作系统提供的；该资源用于表示一个个的事件，比如说文件描述符，或是针对
网络编程中的Socket描述符。事件既可以来自于外部，也可以来自于内部；外部事件比如说客户端的连接请求，客户端发送过来数据等；
内部事件比如说操作系统产生的定时器事件等。它本质上就是一个文件描述符。Handle是事件产生的发源地。
2.Synchronous Event Demultiplexer(同步事件分离器) ：
它本身是一个系统调用，用于等待事件的发生（事件可能是一个，也可能是多个）。调用方法在调用他的时候会被阻塞，一直阻塞到同步
事件分离器上有事件产生为止。对于Linux来说，同步事件分离器指的就是常用的I/O多路复用机制，比如说select、poll、epoll等。
在Java NIO领域中，同步事件分离器对应的组件就是Selector；对应的阻塞方法就是select方法。
3.Event Handler（事件处理器）：本身由多个回调方法构成，这些回调方法构成了与应用相关的对于某个事件的反馈机制。Netty相比于
Java NIO来说，在事件处理器这个角色上进行了一个升级，它为我们开发者提供了大量的回调方法，供我们在特定事件产生时实现相应的
回调方法进行业务逻辑的处理。
4.Concrete Event Handler（具体事件处理器）：是事件处理器的实现。它本身实现了事件处理器所提供的各个回调方法，从而实现了特
定于业务的逻辑。它本质上就是我们所编写的一个个的处理器实现。
5.Initiation Dispatcher（初始分发器）：实际上就是Reactor角色。他本身定义了一些规范，这些规范用于控制事件的调度方式，同时
又提供了应用进行事件处理器的注册、删除等设施。它本身是整个事件处理器的核心所在，Initiation Dispatcher会通过同步事件分离
器来等待事件的发生。一旦事件发生，Initiation Dispatcher首先会分离出每一个事件，然后调用事件处理器，最后调用相关的回调方
法来处理这些事件。

关于论文流程图的分析：
    我们所写的具体方法调用（例如channelread0、registerActive等等）是如何被调用的，其实是在调用之前，事件已经被注册到了subReactor
中了，Event Handler中含有Handler，根据get_Handle()可以获取到，同步事件分离器会通知Handle的事件，然后Initiation Dispatcher
会使用这个Handle，即将我们所写的方法和初始分发器绑定到了一起，就是注册上了。（很多错误，仅供参考）


/**********************63集*****************************/
Reactor模式的流程

1.当应用向Initiation Dispatcher注册具体的事件处理器时，应用会标识出该事件处理器希望Initiation Dispatcher在某个事件发生时
向其通知的该事件，该事件与Handle关联。
2.Initiation Dispatcher会要求每个事件处理器向其传递内部的Handle。该Handle向操作系统标识了事件处理器。
3.当所有的事件处理器注册完毕后，应用会调用handle_events方法来启动Initiation Dispatcher的事件循环。这时，Initiation Dispatcher
会将每个注册的事件管理器的Handle合并起来，并使用同步事件分离器等待这些事件的发生。比如说，TCP协议层会使用Select同步事件分离器
操作来等待客户端发送的数据到达连接的socket handle上。
4.当与某个事件源对应的Handle变为ready状态时（比如说，TCP socket变为等待读状态时），同步事件分离器就会通知Initiation Dispatcher。
5.Initiation Dispatcher会触发事件处理器的回调方法，从而响应这个处于ready状态的Handle。当事件发生时，Initiation Dispatcher
会将被事件源激活的Handle作为【key】来寻找并分发恰当的事件处理器回调方法。
6.Initiation Dispatcher会回调事件处理器的handle_events回调方法来执行特定于应用的功能（开发者自己所编写的功能），从而响应整个事件。
所发生的事件类型可以作为该方法参数并被该方法内部使用来执行额外的特定于服务的分离与分发。

有一个很重要的问题，bossgroup在接收到连接时，是如何把连接传送给workergroup的，其实是这样的，每建立一个channel，框架就会往
对应的channelpipeline的末尾添加一个accepter。由accepter进行两者之间的切换。

/**************************************65集*********************************************/
    channel和channelpipeline是相互包含引用的，在创建channel的时候会把channelpipeline也创建好，channelpipeline之间包含的是
一个个的channelHandler。channelpipeline使用到了一种拦截过滤器模式，我们通常所使用的过滤器和拦截器无论是在请求还是过滤的时候
都会进行过滤和拦截，但是channelpipeline中的handler会对请求和响应中的一种或二种起作用，例如inbound是对请求，outbound是对响应，
inboundAndoutbound同时针对请求和响应。
    那么hanler之间是如何进行事件的传递呢，是ChannelHandlerContext相关的触发事件。
对于IO线程（orkerGroup）中比较耗时的事件，有2种处理方式；
1.pipeline.addLast(group, "handler", new MyBusinessLogicHandler()),group是一个线程池，用来额外开启线程来处理耗时的事件。
2.在实现具体的handler的时候，手动增加一个线程池（线程还是线程池不太了解）来处理耗时的事件。


/**************************************66集**************************************/















































